# This is a basic workflow to help you get started with Actions


name: CI Pipeline


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      scenario_name:
        description: "Perform a double click option"
        required: false
        default: ""


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Setup environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"


      - name: Build the solution
        run: dotnet build --configuration release


  test:
    runs-on: windows-latest
    needs: build


    steps:
       - name: Checkout Repo
         uses: actions/checkout@v4


       - name: setup sdk
         uses : actions/setup-dotnet@v4
         with:
           dotnet-version: "9.0.x"

       - name: Run Tests
         run: |
             if [ -z "${{ github.event.inputs.scenario_name }}" ]; then
             echo "No scenario specified. Running all tests..."
             dotnet test --configuration Release --logger "trx;LogFileName=test_results.trx" --results-directory TestResults
             else
             echo "Running specific scenario: ${{ github.event.inputs.scenario_name }}"
             dotnet test --configuration Release --filter "Name=${{ github.event.inputs.scenario_name }}" --logger "trx;LogFileName=test_results.trx" --results-directory TestResults
             fi
             shell: bash


       - name: Upload Test Results
         uses: actions/upload-artifact@v4
         with:
          name: TestResults
          path: TestResults/*.trx

       - name: Install Allure CLI
         run: |
          choco install allure -y
          allure --version

       - name: Generate Allure Report
         run: |
             allure generate ./allure-results --clean -o ./allure-report
              allure open ./allure-report

       - name: Upload Allure Report
         uses: actions/upload-artifact@v4
         with:
           name: Allure_Report
           path: allure-report
           
       - name: Upload Test Reports
         if: always()
         uses: actions/upload-artifact@v4
         with:
          name: Selenium_ExtentReports
          path: |
            **/ExtentReports/**
             TestResults.log

             
       - name: Archive build logs
         if: always()
         uses: actions/upload-artifact@v4
         with:
          name: logs
          path: |
            **/*.log
