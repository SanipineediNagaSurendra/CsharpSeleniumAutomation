// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace DemoQA_Automation.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Elements")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class ElementsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Elements", "A short summary of the elements feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Elements.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
#line 6
 await testRunner.GivenAsync("User launches the website \"https://demoqa.com/\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.AndAsync("User selects the \"Elements\" feature from the homepage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submit valid data in the Text Box form")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("TextBoxvalid")]
        public async global::System.Threading.Tasks.Task SubmitValidDataInTheTextBoxForm()
        {
            string[] tagsOfScenario = new string[] {
                    "TextBoxvalid"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Submit valid data in the Text Box form", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 11
  await testRunner.WhenAsync("User selects the \"Text Box\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
  await testRunner.AndAsync("User enters the name \"Surendra Sanipineedi\" in the Full Name field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.AndAsync("User enters the email \"surendra@gmail.com\" in the Email field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("User enters a address in the Current Address field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.AndAsync("User enters a address in the Permanent Address field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
  await testRunner.AndAsync("User clicks on the \"submit\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
  await testRunner.ThenAsync("The displayed content should match the entered values", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submit invalid data in the Text Box form")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("TextBoxInvalid")]
        public async global::System.Threading.Tasks.Task SubmitInvalidDataInTheTextBoxForm()
        {
            string[] tagsOfScenario = new string[] {
                    "TextBoxInvalid"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Submit invalid data in the Text Box form", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 21
  await testRunner.WhenAsync("User selects the \"Text Box\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
  await testRunner.AndAsync("User enters the name \"surendra Sanipineedi\" in the Full Name field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("User enters the email \"surendragmail.com\" in the Email field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("User enters a address in the Current Address field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("User enters a address in the Permanent Address field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
  await testRunner.AndAsync("User clicks on the \"submit\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.ThenAsync("The Email field should be highlighted with a red border", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("select a parent checkbox and verify all child checkboxes are selected")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("CheckBoxValid")]
        public async global::System.Threading.Tasks.Task SelectAParentCheckboxAndVerifyAllChildCheckboxesAreSelected()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckBoxValid"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select a parent checkbox and verify all child checkboxes are selected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 32
  await testRunner.WhenAsync("User selects the \"Check Box\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
  await testRunner.AndAsync("User expands the \"Toggle\" node", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
  await testRunner.AndAsync("User selects the \"Home\" checkbox", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.ThenAsync("All child checkboxes should be selected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("select a child checkbox and verify all parent checkboxes are partially selected")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("CheckBoxpartialstate1")]
        public async global::System.Threading.Tasks.Task SelectAChildCheckboxAndVerifyAllParentCheckboxesArePartiallySelected()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckBoxpartialstate1"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select a child checkbox and verify all parent checkboxes are partially selected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 39
  await testRunner.WhenAsync("User selects the \"Check Box\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
  await testRunner.AndAsync("User expands the \"Toggle\" node", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
  await testRunner.AndAsync("User expandes the \"Desktop\" node", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
  await testRunner.AndAsync("User selects the \"Notes\" checkbox", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.ThenAsync("The \"Desktop\" checkbox should be in a partially selected state", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Uncheck all children and verify parent becomes unselected")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("CheckBoxInvalidstate")]
        public async global::System.Threading.Tasks.Task UncheckAllChildrenAndVerifyParentBecomesUnselected()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckBoxInvalidstate"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Uncheck all children and verify parent becomes unselected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 47
  await testRunner.WhenAsync("User selects the \"Check Box\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
  await testRunner.AndAsync("User expands the \"Toggle\" node", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.AndAsync("User expandes the \"Documents\" node", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
  await testRunner.AndAsync("User selects all checkboxes under \"Documents\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("User unchecks the \"Office\" checkbox", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.ThenAsync("The \"Documents\" checkbox should be in a partially selected state", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select \"Yes\" RadioButton option")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("RadioButton")]
        public async global::System.Threading.Tasks.Task SelectYesRadioButtonOption()
        {
            string[] tagsOfScenario = new string[] {
                    "RadioButton"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Select \"Yes\" RadioButton option", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 56
  await testRunner.WhenAsync("User selects the \"Radio Button\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
  await testRunner.AndAsync("User select the \'Yes\' RadioButton", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
  await testRunner.ThenAsync("The message \'You have selected \'and \'Yes\' should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify \"No\" radio button is disabled")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("RadioButton1")]
        public async global::System.Threading.Tasks.Task VerifyNoRadioButtonIsDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "RadioButton1"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify \"No\" radio button is disabled", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 62
 await testRunner.WhenAsync("User selects the \"Radio Button\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
 await testRunner.ThenAsync("The \"No\" radio button should be disabled and not selectable", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new user record in the web table")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("WebTablesAdd")]
        public async global::System.Threading.Tasks.Task AddNewUserRecordInTheWebTable()
        {
            string[] tagsOfScenario = new string[] {
                    "WebTablesAdd"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add new user record in the web table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 67
  await testRunner.WhenAsync("User navigates to the \"Web Tables\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
  await testRunner.AndAsync("User click on the \"Add\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
  await testRunner.AndAsync("User enters \"Surendra\" in the First Name field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.AndAsync("User enters \"Sanipineedi\" in the Last Name field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
  await testRunner.AndAsync("User enters \"30\" in the Age field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.AndAsync("User enters \"surendra@gmail.com\" in the Email field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
  await testRunner.AndAsync("User should add salary \"30000\" in the Salary field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
  await testRunner.AndAsync("User enters the \"Finance\" in the department field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
  await testRunner.AndAsync("User clicks on the \"submit\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
  await testRunner.ThenAsync("The new record with name \"Sanipineedi\" should appear in the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a user record from the web table")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("WebTablesDelete")]
        public async global::System.Threading.Tasks.Task DeleteAUserRecordFromTheWebTable()
        {
            string[] tagsOfScenario = new string[] {
                    "WebTablesDelete"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete a user record from the web table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 80
  await testRunner.WhenAsync("User is on the \"Web Tables\" page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 81
  await testRunner.AndAsync("User clicks on the \"Delete\" button for the record with email \"cierra@example.com\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
  await testRunner.ThenAsync("The record with email \"cierra@example.com\" should be removed from the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Perform a double click option")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("Buttons")]
        public async global::System.Threading.Tasks.Task PerformADoubleClickOption()
        {
            string[] tagsOfScenario = new string[] {
                    "Buttons"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Perform a double click option", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 86
  await testRunner.WhenAsync("User selects the \"Buttons\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
  await testRunner.AndAsync("user double click on the \"Double Click Me\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
  await testRunner.ThenAsync("verify the message \'You have done a double click\' should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("select the link redirect to the new tab")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("Links")]
        public async global::System.Threading.Tasks.Task SelectTheLinkRedirectToTheNewTab()
        {
            string[] tagsOfScenario = new string[] {
                    "Links"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select the link redirect to the new tab", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 92
  await testRunner.WhenAsync("User selects the \"Links\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
  await testRunner.AndAsync("User clicks on the \"Home\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
  await testRunner.ThenAsync("A new browser tab should open with the DemoQA home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
