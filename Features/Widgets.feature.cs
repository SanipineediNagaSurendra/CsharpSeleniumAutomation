// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace DemoQA_Automation.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Widgets")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class WidgetsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Widgets", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Widgets.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
#line 6
await testRunner.GivenAsync("User launches the website \"https://demoqa.com/\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.AndAsync("User selects the \"Widgets\" feature from the homepage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating Accordian fearture")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public async global::System.Threading.Tasks.Task ValidatingAccordianFearture()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating Accordian fearture", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 11
  await testRunner.WhenAsync("User selects the \"Accordian\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
  await testRunner.ThenAsync("User should see the text of \"Accordian\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify content of Section 1")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag2")]
        public async global::System.Threading.Tasks.Task VerifyContentOfSection1()
        {
            string[] tagsOfScenario = new string[] {
                    "tag2"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify content of Section 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 16
  await testRunner.WhenAsync("User selects the \"Accordian\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
  await testRunner.ThenAsync("body should contain \"Lorem Ipsum is simply dummy text\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify content of Section 2")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag3")]
        public async global::System.Threading.Tasks.Task VerifyContentOfSection2()
        {
            string[] tagsOfScenario = new string[] {
                    "tag3"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify content of Section 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 21
 await testRunner.WhenAsync("User selects the \"Accordian\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.AndAsync("I click on \"Where does it come from?\" header", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.ThenAsync("body should contain \"Contrary to popular belief\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify content of Section 3")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag4")]
        public async global::System.Threading.Tasks.Task VerifyContentOfSection3()
        {
            string[] tagsOfScenario = new string[] {
                    "tag4"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify content of Section 3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 27
await testRunner.WhenAsync("User selects the \"Accordian\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.WhenAsync("I click on \"Why do we use it?\" header", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("body should contain \"It is a long established fact\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating the Multiple Colours")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag5")]
        public async global::System.Threading.Tasks.Task ValidatingTheMultipleColours()
        {
            string[] tagsOfScenario = new string[] {
                    "tag5"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating the Multiple Colours", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 33
 await testRunner.WhenAsync("User selects the \"Auto Complete\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Colours"});
                table2.AddRow(new string[] {
                            "Red"});
                table2.AddRow(new string[] {
                            "Green"});
                table2.AddRow(new string[] {
                            "Yellow"});
                table2.AddRow(new string[] {
                            "White"});
#line 34
  await testRunner.AndAsync("User shouls selects the multiple colours", ((string)(null)), table2, "And ");
#line hidden
#line 40
 await testRunner.ThenAsync("\"Yellow\" should be displayed in the input box", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating Single colour section")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag6")]
        public async global::System.Threading.Tasks.Task ValidatingSingleColourSection()
        {
            string[] tagsOfScenario = new string[] {
                    "tag6"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating Single colour section", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 44
  await testRunner.WhenAsync("User selects the \"Auto Complete\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
  await testRunner.AndAsync("User selects the \"Green\" Colour", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.ThenAsync("\"Green\" should be displayed in the input box", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating DatePicker using given date")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag7")]
        public async global::System.Threading.Tasks.Task ValidatingDatePickerUsingGivenDate()
        {
            string[] tagsOfScenario = new string[] {
                    "tag7"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating DatePicker using given date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 50
 await testRunner.WhenAsync("User selects the \"Date Picker\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
 await testRunner.AndAsync("User selects the select date input field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
 await testRunner.AndAsync("User should enter the date \"28 Sep 2029\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
 await testRunner.ThenAsync("User should verify given date \"09/28/2029\" is displayed or not", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating Date and Time section")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag8")]
        public async global::System.Threading.Tasks.Task ValidatingDateAndTimeSection()
        {
            string[] tagsOfScenario = new string[] {
                    "tag8"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating Date and Time section", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 57
 await testRunner.WhenAsync("User selects the \"Date Picker\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
 await testRunner.AndAsync("User selects the Date and Time input field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
 await testRunner.AndAsync("User should enter the date of \"28 Sep 2029\" and time \"11:30 PM\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.ThenAsync("User should verify the given date can be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify default slider value")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag9")]
        public async global::System.Threading.Tasks.Task VerifyDefaultSliderValue()
        {
            string[] tagsOfScenario = new string[] {
                    "tag9"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify default slider value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 64
     await testRunner.WhenAsync("User selects the \"Slider\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
    await testRunner.ThenAsync("the slider value should be \"25\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move slider to minimum value")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag10")]
        public async global::System.Threading.Tasks.Task MoveSliderToMinimumValue()
        {
            string[] tagsOfScenario = new string[] {
                    "tag10"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Move slider to minimum value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 69
    await testRunner.WhenAsync("User selects the \"Slider\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
    await testRunner.WhenAsync("I move the slider to \"75\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
    await testRunner.ThenAsync("the slider value should be \"75\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start and complete the progress bar")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag11")]
        public async global::System.Threading.Tasks.Task StartAndCompleteTheProgressBar()
        {
            string[] tagsOfScenario = new string[] {
                    "tag11"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start and complete the progress bar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 75
    await testRunner.WhenAsync("User selects the \"Progress Bar\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
    await testRunner.AndAsync("I click the \"Start\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
    await testRunner.ThenAsync("the progress bar should reach \"100\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating What tab list in Tabs section")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag12")]
        public async global::System.Threading.Tasks.Task ValidatingWhatTabListInTabsSection()
        {
            string[] tagsOfScenario = new string[] {
                    "tag12"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating What tab list in Tabs section", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 81
await testRunner.WhenAsync("User selects the \"Tabs\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
await testRunner.ThenAsync("the \"Lorem Ipsum is simply dummy text\" tab content should be visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating Tab list  in Tabs section")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag13")]
        public async global::System.Threading.Tasks.Task ValidatingTabListInTabsSection()
        {
            string[] tagsOfScenario = new string[] {
                    "tag13"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating Tab list  in Tabs section", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 86
await testRunner.WhenAsync("User selects the \"Tabs\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
await testRunner.AndAsync("user selects the \"Origin\" tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
await testRunner.ThenAsync("the \"Contrary to popular belief, Lorem Ipsum\" tab content should be visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating Menu item in widgets feature")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag14")]
        public async global::System.Threading.Tasks.Task ValidatingMenuItemInWidgetsFeature()
        {
            string[] tagsOfScenario = new string[] {
                    "tag14"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validating Menu item in widgets feature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 92
await testRunner.WhenAsync("User selects the \"Menu\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
await testRunner.AndAsync("User should mouse hover the \"Main Item 2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
await testRunner.ThenAsync("should display \"Sub Item\" under given menutab", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify tooltip on hover over the button")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag15")]
        public async global::System.Threading.Tasks.Task VerifyTooltipOnHoverOverTheButton()
        {
            string[] tagsOfScenario = new string[] {
                    "tag15"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify tooltip on hover over the button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 98
   await testRunner.WhenAsync("User selects the \"Tool Tips\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 99
    await testRunner.WhenAsync("I hover over the \"Hover me to see\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 100
    await testRunner.ThenAsync("I should see a tooltip with text \"You hovered over the Button\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify tooltip on hover over the text field")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag16")]
        public async global::System.Threading.Tasks.Task VerifyTooltipOnHoverOverTheTextField()
        {
            string[] tagsOfScenario = new string[] {
                    "tag16"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify tooltip on hover over the text field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 104
    await testRunner.WhenAsync("User selects the \"Tool Tips\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 105
    await testRunner.WhenAsync("I hover over the \"Hover me to see\" in the input feild", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 106
    await testRunner.ThenAsync("I should see a tooltip with text \"You hovered over the text field\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify tooltip on hover over the Contrary link")]
        [NUnitRetry.NRetry(2)]
        [NUnit.Framework.CategoryAttribute("tag17")]
        public async global::System.Threading.Tasks.Task VerifyTooltipOnHoverOverTheContraryLink()
        {
            string[] tagsOfScenario = new string[] {
                    "tag17"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify tooltip on hover over the Contrary link", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 110
    await testRunner.WhenAsync("User selects the \"Tool Tips\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 111
    await testRunner.WhenAsync("I hover over the \"Contrary\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
    await testRunner.ThenAsync("I should see a tooltip with text \"You hovered over the Contrary\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
